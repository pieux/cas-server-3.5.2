<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to Jasig under one or more contributor license
    agreements. See the NOTICE file distributed with this work
    for additional information regarding copyright ownership.
    Jasig licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file
    except in compliance with the License.  You may obtain a
    copy of the License at the following location:

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<chapter xml:lang="en" xml:id="configuration-management" xmlns="http://docbook.org/ns/docbook"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xml="http://www.w3.org/XML/1998/namespace" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://docbook.org/ns/docbook ./schemata/docbook.xsd
http://www.w3.org/1999/xlink "
         version="5.0">

    <title>Configuration Management</title>

    <para>Configuration management is how you're going to manage your CAS implementation for real.
    </para>
    <section xml:id="maven-war-overlay">
            <title>Maven War Overlay</title>
        <para>TODO: Document Maven Overlay, inspired by and merging in the content of
        <link xlink:href="https://wiki.jasig.org/display/CASUM/Best+Practice+-+Setting+Up+CAS+Locally+using+the+Maven2+WAR+Overlay+Method">
            https://wiki.jasig.org/display/CASUM/Best+Practice+-+Setting+Up+CAS+Locally+using+the+Maven2+WAR+Overlay+Method</link>.
        </para>
        <section>
            <title>Assumptions</title>
            <para>
                This documentation on how to use Maven Overlay assumes that you already understand how to install CAS
                and what it requires.  It assumes you've already got Java and a servlet container and have done something
                sensible about SSL certificates and so forth.  That is, the scope of this chapter is exclusively what's
                special about the Maven Overlay approach.
            </para>
            <para>
                While using Maven Overlay is highly recommended, don't start here!  CAS ships a perfectly reasonable
                ready-to-deploy .war file for trying out CAS on your local computer running it on localhost.  Start
                there before building your own custom CAS .war using this Maven overlay approach.
            </para>
        </section>
        <section>
            <title>Installing Maven 2</title>
            <para>
                While you also need Maven to build CAS itself from source, a Maven Overlay approach to configuration
                heavily depends on Maven, so here's some tips for Maven2 installation.  Maven2 is not a Jasig product
                and has <link xlink:href="https://maven.apache.org/">its own website</link>.
            </para>
            <para>The latest version of Maven as of this writing is Maven 3.0.3, but CAS is still most adopted with and
            most tested with Maven 2, so these instructions  assume and are tested with Maven 2.</para>
            <para>Maven 1 just won't work with the Maven overlay approach (and is pretty old technology at this point).
                You must use Maven 2 or later.</para>
            <section>
                <title>Obtaining and Installing</title>
                <para>Your environment may already have Maven installed.  For instance, Macintosh OS X typically
                includes a Maven distribution by default.  You might want to use or upgrade that rather than install
                a new version of Maven.  Then again, you might want the control of downloading and installing a
                specific version.</para>
                <para>In any case, one way to get Maven is to
                    <link xlink:href="https://maven.apache.org/download.html">download it from the Maven website</link>.
                    The latest version of Maven 2 as of this writing is Maven 2.2.1.  You could install it to somewhere
                like <filename>/opt/apache-maven-2.2.1</filename> .  Life will be easier if you choose a path that does
                    not include spaces in the names of its directories.  Regardless of where you install Maven, this
                    documentation refers to this path as <property>$MAVEN_HOME</property>.</para>
            </section>
            <section>
                <title>Setting Maven-related environment variables and adding the executable to the Path...</title>
                <para>Once you've downloaded and expanded the Maven 2 binary, or decided to use a version of Maven 2
                that shipped in your operating system, you'll need to expose a <property>M2_HOME</property>
                environment variable.  You may need to set other Maven options as an environment variable, and
                you may be happier if you put Maven on your Path so you can execute it easily from the command line.</para>

                <section>
                    <title>...on Unix-like Operating Systems</title>
                    <para>These instructions work in general on Mac OS X and on Linux variants.  Best practices and
                    conventions for permanently setting environment variables will vary depending upon the detauls of
                    your environment.</para>
                    <orderedlist>
                        <listitem>
                            <para>In a command terminal, add the <property>M2_HOME</property> environment variable,
                            e.g. <code>export M2_HOME=$MAVEN_HOME</code> . Recall that $MAVEN_HOME is the placeholder
                            in this documentation for the path to wherever your Maven 2 installation lives.</para>
                        </listitem>
                        <listitem>
                            <para>Add the <property>M2</property> environment variable, e.g.
                                <code>export M2=$M2_HOME/bin</code> .</para>
                        </listitem>
                        <listitem>
                            <para>Optionally, add the <property>MAVEN_OPTS</property> environment variable to specify
                            JVM properties, e.g. <code>export MAVEN_OPTS=&quot;-Xms256m -Xmx512m&quot;</code>. This
                            environment variable can supply extra options to Maven and to the Java Virtual Machine in
                            which Maven will run.</para>
                        </listitem>
                        <listitem>
                            <para>Add the <property>M2</property> environment variable to your path, e.g.
                                <code>export PATH=$M2:PATH</code>.</para>
                        </listitem>
                        <listitem>
                            <para>Ensure that the <property>JAVA_HOME</property> environment variable is set to the
                        location of your JDK, e.g. <code>export JAVA_HOME=/usr/java/jdk1.5.0_02</code>
                        and that $JAVA_HOME/bin is in your <property>PATH</property> environment variable.
                        </para>
                        </listitem>
                        <listitem>
                            <para>Run <command>mvn --version</command> to verify that Maven 2 is correctly installed.
                            </para>
                             <para>
                                 Example result of running <command>mvn --version</command>
                              </para>
                            <para>
                                <computeroutput>
                                    you@hostname:~$ mvn --version
                                    Apache Maven 2.2.1 (rdebian-4)
                                    Java version: 1.6.0_26
                                    Java home: /usr/lib/jvm/java-6-sun-1.6.0.26/jre
                                    Default locale: en_US, platform encoding: UTF-8
                                    OS name: "linux" version: "2.6.38-11-generic" arch: "amd64" Family: "unix"
                                    you@hostname:~$
                                </computeroutput>
                            </para>
                        </listitem>
                    </orderedlist>
                </section>

                <section>
                    <title>...on Windows</title>
                    <orderedlist>
                        <listitem>
                            <para>Add the <property>M2_HOME</property> environment variable by opening the system
                            properties (WinKey + Pause), selecting the &quot;Advanced&quot; tab, clicking the
                                &quot;Environment Variables&quot; button, then adding the <property>M2_HOME</property>
                            variable to the set of user variables with value $MAVEN_HOME (recall that $MAVEN_HOME is the
                            placeholder in this documentation for the path to your Maven installation, something
                            like <filename>/opt/apache-maven-2.2.1</filename> .  Be sure to omit any quotation marks
                            around the path even if it includes spaces.  The value of <property>M2_HOME</property>
                                should not end with a \ character -- if you're using Maven 2.0.9 or earlier, it must
                            not end with a slash character.</para>
                        </listitem>
                        <listitem>
                            <para>In the same dialog, add an environment variable <property>M2</property> with value
                            %M2_HOME%\bin .</para>
                        </listitem>
                        <listitem>
                            <para>Optionally, in the same dialog, add the <property>MAVEN_OPTS</property> environment
                            variable in the user variables to specify JVM properties for use with Maven.  For example,
                            the value &quot;-Xms256m -Xmx512m&quot; instructs Maven to use at least 256 megabytes and
                            at most 512 megabytes of memory.  More ambitious usages of Maven can require more than
                            the default allocation of memory.  In general, the <property>MAVEN_OPTS</property>
                            environment variable supplies extra JVM configuration to Maven.</para>
                        </listitem>
                        <listitem>
                            <para>In the same dialog, create or update a <property>Path</property> environment
                            variable in the user variables and prepend the value &quot;%M2%&quot; to make the Maven
                            executable available ubiquitously on the command line.</para>
                        </listitem>
                        <listitem>
                            <para>In the same dialog, ensure that the <property>JAVA_HOME</property> exists in your
                                user variables or in the system variables and is set to the location of your JDK, e.g.
                                &quot;C:\Program Files\Java\jdk1.5.0_02&quot; and that &quot;%JAVA_HOME%\bin&quot; is
                                in the <property>Path</property> environment variable.
                            </para>
                        </listitem>
                        <listitem>
                            <para>Open a new command prompt (Winkey + R then type &quot;cmd&quot; and press Enter) and
                            run &quot;mvn --version&quot; to verify that Maven is correctly installed and runnable
                            from the command line.</para>
                        </listitem>
                    </orderedlist>
                </section>
            </section>
        </section>

        <section>
            <title>Setting up your local Maven-Overlay-using CAS project</title>
            <para>WWorking with a Maven2-based project may be different from when you worked with an Ant-based project.
                For many people, Ant-based projects included things like manually managing dependencies, building
                source for external projects that you were integrating with, keeping binary JAR files in your version
                control system, and manually crafting Ant build files. Maven2 is a different way of thinking. The
                libraries or projects you're working with maintain the list of required dependencies, Maven2 attempts
                to resolve them and any conflicts, downloads them and keeps them in a local cache. It also uses
                standard "goals" (which were often called tasks in Ant). Recent versions of Ant have included some of
                these features with add-ons such as Ivy 2.0. At this point, there is no expectation that you understand
                completely how Maven2 works. We'll explain the important concepts as we go along.</para>
            <para>
                In particular for CAS, we'll be working with what's called a "WAR Overlay." Essentially, the CAS open
                source project has already
                built and made available a CAS webapplication as part of the standard CAS distribution. What you're
                interested in doing is
                ADDING to and modifying the configuration of this standard distribution, possibly by adding new files
                or configuration, new dependencies,
                or replacing a few of the standard files. This WAR Overlay process supports all of this modification.
                We always
                recommend this process because if keeps you out of the business of downloading the CAS source,
                building it, making your customizations, rebuilding it, etc. and maintaining a copy of Jasig CAS
                server source code
                locally. With the WAR overlay, you're only keeping the files you've locally changed, so your
                local CAS project is more expressive of what is unique, special, and different in your local
                configuration and customization of CAS.
            </para>

            <section>
                <title>Your local CAS project directory</title>
                <para>Your local CAS project's source code will consist of a directory, a folder with files in it
                representing the description of your local CAS implementation.</para>
                <para>The first step therefore is to create this directory, your local workspace.  This tutorial doesn't
                require an IDE, and you may not need an IDE to cope with the relatively few files involved.</para>
                <para>You can put this directory anywhere you like.  If you need somewhere,
                   <filename>/opt/work</filename> is a good spot.</para>
                <para>In any case, this documentation will refer to this workspace directry as $WORKSPACE , and we
                won't refer to it much, because the very next step is to create a directory within it where all the
                real work will happen.</para>
                <para>Within $WORKSPACE, add a directory for your local organization's CAS project, that is, the
                directory for the project of your local CAS configurations and customizations.  You might call this
                <filename>local-cas</filename>, yielding a path <filename>$WORKSPACE/local-cas</filename> .
                This documentation will refer to this directory as your $PROJECT_HOME .</para>
                 <para>Into your $PROJECT_HOME directory will go two things: a special file named pom.xml that describes
                your local CAS implementation as a Maven Overlay war project, and all of the changed and new files that
                make your local implementation differ from the CAS .war as delivered by the CAS open source project.</para>
            </section>

            <section>
                <title>Your pom.xml</title>

                <para>You CAS implementation's <filename>pom.xml</filename> describes your local institution's CAS implementation as a Maven
                    project.  This <filename>pom.xml</filename>. should go directly in your $PROJECT_HOME directory, as in $PROJECT_HOME/pom.xml</para>
            </section>


            <section>
                <title>The rest of the documentation...</title>
                <para>TODO! Here goes the meat of all the really useful and Maven-overlay-specific documentation!</para>
            </section>
        </section>

    </section>

</chapter>
